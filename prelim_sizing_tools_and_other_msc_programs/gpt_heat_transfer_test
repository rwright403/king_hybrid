import numpy as np
import matplotlib.pyplot as plt

# Parameters
L = 1.0  # length of the nozzle (m)
T_inlet = 500.0  # inlet temperature (K)
T_initial = 300.0  # initial temperature (K)
alpha = 1e-5  # thermal diffusivity (m^2/s)
N = 50  # number of spatial points
M = 1000  # number of time steps
dx = L / (N - 1)  # spatial step size
dt = 0.1  # time step size
x = np.linspace(0, L, N)  # spatial grid

# Convective heat transfer parameters
h_g = 500  # convective heat transfer coefficient (W/m²·K)
r = 0.9  # recovery factor
u = 100  # gas velocity (m/s)
c_p = 1005  # specific heat capacity at constant pressure (J/kg·K)
T_g = 1200  # gas temperature (K)

# Heat transfer fraction
heat_transfer_fraction = 0.15  # 15% of the heat generated

# Compute heat flux based on empirical rule
q_total = h_g * (T_g - T_initial)  # total heat transfer rate (W/m²)
q = heat_transfer_fraction * q_total  # heat flux into the nozzle wall (W/m²)

# Stability condition
if alpha * dt / dx**2 >= 0.5:
    raise ValueError("Stability condition violated. Choose smaller dt or larger dx.")

# Initial temperature distribution
T = np.ones(N) * T_initial
T_new = np.zeros(N)

# Time-stepping loop
for n in range(M):
    T_new[0] = T_inlet  # Apply inlet boundary condition
    T_new[-1] = T[-1]  # Insulated boundary condition (Neumann condition)

    for i in range(1, N - 1):
        T_aw = T_g + r * u**2 / (2 * c_p)  # Compute adiabatic wall temperature
        T_wg = T[i]  # Wall gas temperature
        q = h_g * (T_aw - T_wg)  # Compute heat flux
        T_new[i] = T[i] + alpha * dt / dx**2 * (T[i+1] - 2*T[i] + T[i-1]) + q * dt / (1000 * c_p * dx)

    T = T_new.copy()  # Update temperature distribution

    # (Optional) Plot the temperature distribution at certain intervals
    if n % 100 == 0:
        plt.plot(x, T, label=f't={n*dt:.1f}s')

# Plot results
plt.xlabel('Position (m)')
plt.ylabel('Temperature (K)')
plt.title('Temperature Distribution in Nozzle Over Time')
plt.legend()
plt.show()
